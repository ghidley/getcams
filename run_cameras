#!/bin/bash 
version="v04052021"
# File: run_cameras

# Variables now set in and accessed from external files config_runcam_vars and config_getcams_vars
# Will be managed by systemctl start/stop/restart when in production mode:
#	Start=/home/hpwren/bin/run_cameras -I
#	ExecStop=/home/hpwren/bin/run_cameras -X
#
# Will be invoked at boot once "systemctl enable getcams" is run, from:
#	/etc/systemd/system/multi-user.target.wants/getcams.service
# Other options include -d (parent debug) and -D (parent and child debug) or a "make test"
# Service control options added: -X to stop, -R to restart, -I to start (initialy at boot)
#
# run_cameras:
# Starts fetching images from all enabled cameras
# Reads camera parameters from cam_params:
#    NAME:PROGRAM:TYPE:STARTUP_DELAY:LABEL:RUN_ONCE:CAPTURES/MINUTE:OPTIONAL CAM-SPECIFIC URL TO USE WITH CURL:
#    hpwren-iqeye7:getcams-iqeye.pl:c:2:"Cal Fire Ramona AAB, http\://hpwren.ucsd.edu c1":1:1
#    smer-tcs3-mobo:getcams-mobo.pl:c:3:"SDSU SMER TCS3, http\://hpwren.ucsd.edu c1":1:1
#    mpo-p200iqeye:getcams-iqeye.pl:c:0:"Palomar Observatory, 200 inch, http\://hpwren.ucsd.edu c0":0:1:'http\://p200cam.palomar.caltech.edu/now.jpg':
#
# Locks self using $lockpath/RUNCAM_PID 
# Locks children using $lockpath/$getcams-???.lock
# Logs debug info to stdout
# Logs to $logpath/runcamlog: errors and and getcam invocations 
# Logs to /var/log/messages (via logger, syslog) upon signal trap or exit:
#
# Overall logic:
# while true (loop)
#   while read cam_params (e.g. for each camera entry ...)
#     if first time through loop or if cam_params changed since last reading
#       Kill any running fetches (getcams-???'s), remove their lockfiles ... and fall through to [re]Exec below
#     else (in monitoring mode)
#       if cam fetch process running, continue (skip) to next cam fi, ... otherwise
#       Remove any leftover lockfiles and fall through to [re]exec fetch (getcams-???'s)
#     fi
#     [Re-]exec camera fetch
#   done while read cam_params
# done
#

# Run as user HPWREN
### OLD CODE TO REMOVE ...
#HOME="/home/hpwren"
#export HOME
#PATH="$HOME/bin/getcams:$PATH"
#export PATH
#CONFIG_FILE="$HOME/bin/getcams/config_runcam_vars"

tstamp=$(date +"%Y%m%d.%H%M%S")

if [ -n "$RHOME" ];                            # If preset we are container based
then
    PATH="$RHOME:$PATH"
    CONFIG_FILE="$RHOME/config_runcam_vars"
    #printf "\nPreset RHOME = $RHOME config file =  $CONFIG_FILE ... \n"
else                                         # Otherwise we are server or VM based
    RHOME="/home/hpwren"
    PATH="$RHOME/bin/getcams:$PATH"
    CONFIG_FILE="$RHOME/bin/getcams/config_runcam_vars"
    #printf "\nNot preset RHOME = $RHOME config file =  $CONFIG_FILE ... \n"
fi
export PATH;
export RHOME;
export RPATH;

# Read in configuration file
if [[ ! -f  $CONFIG_FILE ]] ;
then
    printf "Missing config file  $CONFIG_FILE ... Exiting\n"
    logger -p notice -- "$(basename $0)[$pid] Missing config file  $CONFIG_FILE ... Exiting"
    printf "$tstamp: $(basename $0)[$$]: Missing config file  $CONFIG_FILE ... Exiting\n" >> $log
    exit
fi
source $CONFIG_FILE

# If needed, create master lockfile directory
[ -e $lockpath ] || mkdir $lockpath 
[ -e $logpath ] || mkdir $logpath
[ -e $TDIR ] || mkdir $TDIR

INITIAL=false
RESTART=false
STOP=false

cam_param_date=$(stat  --printf %Y $params)
cam_access_date=$(stat --printf %Y $access)

debug_runs=5		# For debug only, run n iterations ...
rescan_delay=60  # Time between re-reading of cam_param file
cam_delay=1  # Delay between reading each line of cam_params 

# Last ditch effort to restart non-responsive getcams - monitors log file update frequency
hang_limit="-4"  # Max delay in minutes for logfile updates before considering getcams proc is hung  ... must be negative to use in find w/-mmin

first_loop=true	# Enable first time through loop logic, killing, if needed, and [re]starting all cam fetch processes
loop=0

#printf "$tstamp: $(basename $0)[$$]: Starting $(basename $0) $@ ..." >> $log
printf "$tstamp: $(basename $0)[$$]: Starting $(basename $0) $* ..." >> $log
printf "\n" >> $log
logger -p notice -- "$(basename $0)[$$] was started: $@"

while getopts "vxdDIPXRS" opt; do
    case "$opt" in
    v) set -v
        ;;
    x) set -x
        ;;
    S)  S3=1
	export S3
        ;;
    d)  DBG=1
        ;;
    D)  DBG=1
	export DBG
        ;;
    I)  INITIAL=true
        ;;
    P)  POSIX=1
	export POSIX
        ;;
    R)  INITIAL=true
	RESTART=true
        ;;
    X)  STOP=true
        ;;
    esac
done

# Redefine echo for debugging ... enabled or suppressed based on DBG status
echo () {
	[[ "$DBG" ]] && builtin echo $@
}

### Processing to support deamon mode controls: "systemctl status|start|restart|stop getcams"
# start: invoked via run_cameras -I, no special treatment needed here
# stop: invoked via runcams -X, need to
#	1) kill PID in LOCK and remove LOCK
#	2) kill off all getcams
#	3) exit
# restart: invoked via runcams -R, need to
#	1) kill PID in LOCK and remove LOCK
#	2) kill off all getcams
#	3) continue as if invoked run_cameras -I
#
if [[ "$RESTART" = true ]] || [[ "$STOP" = true ]] ; 
then
	if [ -f "$LOCK" ] ;  #if script lockfile exists then 
	then
		pid=$(cat $LOCK)
		printf "Lockfile exists [$pid] $(ls -ldg $LOCK)\n" 
		printf "Killing PID $pid and removing lockfile\n"
		kill $pid &> /dev/null #kill process, remove lockfile and fall through to exit
		rm -f "$LOCK" # In case any is left over
	fi
	#terminate any running getcams*
	for f in $lockpath/*.lock
	do
		[ -e "${f}" ] || continue
		kpid=$(cat ${f})
		kill $kpid  &> /dev/null #kill process, remove lockfile and fall through to exit
		rm -f ${f}
		printf "Killed proc $kpid and removed old lockfile ${f}\n"
        printf "$tstamp: $(basename $0)[$$]: Killed ${f} [$kpid] ...\n" >> $log
	done
	if [[ "$STOP" = true ]] ; 
	then
		printf "Exiting\n"
		logger -p notice -- "$(basename $0)[$pid] service stopped"
        printf "$tstamp: $(basename $0)[$$]: Exiting $(basename $0) $* ...\n" >> $log
		exit 0
	else
		logger -p notice -- "$(basename $0)[$$] service restarted"
        printf "$tstamp: $(basename $0)[$$]: Service restarted ...\n" >> $log

	fi #if STOP, otherwise fall through to run_cameras -I
fi #if RESTART or STOP ...  
###

finish() {
    printf "$tstamp: $(basename $0)[$$]: Trapped and finished LINE $1 and CMD $2 ...\n" >> $log
    echo -n "Exit on $(caller) "
	rm -f "$LOCK"
	echo ": Trapped signal or exit, removed lockfile $LOCK and exiting"
	logger -p notice -- "$(basename $0)[$$] was terminated: -- restart with  \"run_cameras -I\" if needed"
	exit
}

trap 'finish $LINENO  $BASH_COMMAND' EXIT 1 2 3 6

if [ -f "$LOCK" ] ;  #if script lockfile exists then 
then
	if [[ "$INITIAL" = true ]] ; 
	then
		rm -f "$LOCK" # In case any is left over
	else
		pid=$(cat $LOCK)
		logger -p notice -- "$(basename $0)[$pid] Lockfile exists ... service stopped"
		printf "Lockfile exists [$pid] $(ls -ldg $LOCK)\n" 
		exit 0
	fi
fi
echo "Run_cameras $version writing $$ to $LOCK"
builtin echo "$$" > "$LOCK"

while [ true ]  
do
    loop=$((loop + 1))
	echo "Run_cameras Loop $loop"
    if [ $loop -eq 2 ];
    then
        sleep 300  # Disable restarts during initial startup phase -- e.g. after loop 1 has completed
    fi

	#Fetch camera paramaters from "cam_params" for every enabled camera
	# Format:
	#	NAME:PROGRAM:TYPE:DELAY:LABEL:RUN_ONCE:CAPTURES/MINUTE:OPTIONAL CAM-SPECIFIC URL TO USE WITH CURL:
	#	hpwren-iqeye7:getcams-iqeye.pl:c:2:"Cal Fire Ramona AAB, http\://hpwren.ucsd.edu c1":1:1
	#	smer-tcs3-mobo:getcams-mobo.pl:c:3:"SDSU SMER TCS3, http\://hpwren.ucsd.edu c1":1:1
	#
	# Note: RUN_ONCE=0 keeps getcams-*  running indefinitely, restarting as needed if getcams-??? exits 
	# Note: RUN_ONCE=1 runs getcams-* one time only, which results in one 1 minute camera fetch cycle of CAPTURES/MINUTE image fetches


    #printf "\n$0:$tstamp: [Re]reading cam_params file ...\n" >> $log
	while  IFS=: read -a line	#Camera fetch execution inner loop ... rereads cam_params each time through allowing run time changes
	do
		if [[ ${line[0]:0:1} == "#" ]];
		then
			continue    #On to the next line ...
		fi
		if [ -z "$line" ];
		then
			continue    #Skip lines that are blank
		fi
		if [[ "$first_loop" = true ]] ;  
        then
            sleep $cam_delay # Start up cams 1 second apart 
        fi
		echo "Processing: ${line[*]}"
		cam=${line[0]}
		prog=${line[1]}
		camtype=${line[2]}
		delay=${line[3]}
        #printf "$tstamp: $(basename $0)[$$]: Delay set to $delay\n" >> $log
		label=${line[4]}
		run_once=${line[5]}
		cpm=${line[6]}
                if [[ ${line[7]} ]];
                then
                    url=${line[7]}
                else
                    url="DEFAULT"
                fi
		tstamp=$(date +"%Y%m%d.%H%M%S")

        if [[ $cam =~ "mobo" ]] ; 
        then
            logfile="$cam-$camtype.log"
        else
            logfile="$cam.log"
        fi


		if [[ "$first_loop" = false ]] ;  # Already completed startup, not first time through camera loop
		then
			echo "In monitoring loop ... cam is $cam ... run_once is $run_once ... first_loop is $first_loop"
			if [[ "$run_once" = "1" ]] ;
            then
                sleep $cam_delay 
                continue    # Run_once execution was already initiated the first time through loop, skip to next cam
            fi
		fi

		# If lockfile already exists, and process is running (e.g. not hung), continue on to next cam, otherwise clean up hung process
        # Checks against log file having been updated within the last n minutes (5) ... process is OK ... continue
        if [[ -e  $lockpath/$cam-$camtype.lock ]] ; 
        then
            echo "Lockpath $lockpath/$cam-$camtype.lock exists"
            if [[ -e $logpath/$logfile ]] ; 
            then 
                echo "Logpath $logpath/$logfile exists"
                if  [[ $(find $logpath/$logfile -mmin $hang_limit ) ]]  ; 
                then 
                    echo "Continuing - $logfile ok"
                    sleep $cam_delay 
                    continue 
                else
                    # Clean up hung process
                    #sleep $cam_delay 
                    echo "Lockfile exists - $(ls -ldg $lockpath/$cam-$camtype.lock)" 
                    pid=$(cat $lockpath/$cam-$camtype.lock)
                    if [ -e /proc/$pid ] ; 
                    then
                         kill $pid &> /dev/null   #kill leftover process if running
                    fi
                    rm -f $lockpath/$cam-$camtype.lock
                    echo "Killed hung proc $pid and removed old $lockpath/$cam-$camtype.lock"
                    printf "$tstamp: $(basename $0)[$$]: Killed hung proc $pid and removed old $lockpath/$cam-$camtype.lock\n" >> $log
                fi
            fi
        fi

		# If we got here, any leftover lock file has been removed and we now need to [re]start the camera fetch process 
        tstamp=$(date +"%Y%m%d.%H%M%S")
        #printf "$tstamp: $(basename $0)[$$]: Delay  before exec set to $delay\n" >> $log
		$epath/$prog $cam $camtype $delay "$label" $run_once $cpm $url & lockpid=$!
		builtin echo "$lockpid" > "$lockpath/$cam-$camtype.lock"
		echo "Started  [$lockpid] $epath/$prog $cam $camtype $delay $label $run_once $cpm $url"
        #printf "$tstamp: $(basename $0)[$$]: Delay  after exec set to $delay\n" >> $log
		printf "$tstamp: $(basename $0)[$$]: Started [$lockpid] $epath/$prog $cam $camtype $delay $label $run_once $cpm $url\n" >> $log
		echo "Wrote $lockpid to $lockpath/$cam-$camtype.lock" 
		#sleep $cam_delay  # Between subsequent cam_params line fetching 

	done < $params
	echo "Finished Run_cameras Loop $loop"
	echo ""
	first_loop=false	#Finished first pass, now we are in monitoring mode

	# If cam_params has changed since last reading ...
	new_param_date=$(stat  --printf %Y $params)
	if [[ $new_param_date != $cam_param_date  ]] ;
	then 
		#Reread cam_params file immediately
		echo "Resetting: new_param_date=$new_param_date and old cam_param_date=$cam_param_date"
		cam_param_date=$new_param_date
        continue
	fi
	# If cam_access has changed since last reading ...
	new_access_date=$(stat --printf %Y $access)
	if [[ $new_access_date != $cam_access_date  ]] ;
	then 
		#Reread cam_access file immediately
		echo "Resetting: new_access_date=$new_access_date and old cam_access_date=$cam_access_date"
		cam_access_date=$new_access_date
        continue
	fi
	if [[ "$DBG" ]] && [ $loop -eq $debug_runs ] ; 
	then
		break  # In debug mode quit after $debug_runs loops
	fi
	sleep $rescan_delay	# Wait until re-opening and reparsing cam_params file
done    #In production mode, runs as a service continuously
echo "$(basename $0)[$$]:Done!" #rm -f "$LOCK"  ... Removed in exit trap

